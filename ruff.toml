builtins = ["_"] # Custom: _ should be treated as a builtin.
indent-width = 4 # Default: Explicitly enforce 4 spaces identation.
line-length = 88 # Default: The default for Ruff is sensible enough.
required-version = ">=0.13.0" # Custom: Same version as the dependency.
respect-gitignore = true # Custom: No need to respect gitignore.
show-fixes = true # Custom: Better to show all fixed violations.
target-version = "py313" # Custom: Target Python 3.13.
unsafe-fixes = false # Default: No unsafe fixes should be used.

[format]
docstring-code-format = true # Custom: Code snippets should always be formatted.
indent-style = "space" # Default: Using spaces for tabulations.
line-ending = "lf" # Custom: Use `\n` line endings for all files.
quote-style = "preserve" # Custom: Prefer preserving the quotes to use custom style. Prefixed strings should use ' unless multiline, and also identifiers. For the rest, " should be used instead, unless evading some escaping.


# Ruff lint configuration.
[lint]
ignore = [
    "CPY001", # No need to add a copyright at the start of every file.
    "D203", # Contradicts D211.
    "D212", # Contradicts D213.
    "D400", # Extended by D415.
    "D401", # Imperative mood is not good for functions.
    "T201", # This is a CLI application.
    "Q000", # The quoting style may require using both double and single quotes for inline strings.
]
preview = true # Custom: Linting preview is allowed.
select = ["ALL"] # Custom: Select all lints.

[lint.per-file-ignores]
# Allow unused imports in __init__.py files.
"__init__.py" = ["F401"]
# Allow glob imports in tests/__init__.py files.
"*/tests/__init__.py" = ["F403"]
# Removes the false positive as main.py imports the main function.
"main.py" = ["PLW0406"]


# Flake8 Annotations Lints (ANN) configuration.
[lint.flake8-annotations]
allow-star-arg-any = true # Custom: *args and **kwargs shouldn't be type annotated.
ignore-fully-untyped = false # Default: Unlike the previous statement, everything else should be typed.
mypy-init-return = false # Default: __init__ functions should be fully annotated.
suppress-dummy-args = false # Default: Even dummy arguments should be annotated.
suppress-none-returning = false # Default: Python functions that return None must explicitly state so.


# Flake8 Bandit Lints (C4) configuration.
[lint.flake8-comprehensions]
allow-dict-calls-with-keyword-arguments = false # Default: All dicts should be properly initialized and this is clearly not the way.


# Flake8 Pytest Style Lints (PT) configuration.
[lint.flake8-pytest-style]
fixture-parentheses = false # Default: It makes it cleaner.
mark-parentheses = false # Default: It makes it cleaner.
parametrize-names-type = "tuple" # Default: Tuples are clearer for parameters.
parametrize-values-row-type = "tuple" # Default: Tuples are clearer for parameters.
parametrize-values-type = "list" # Default: The default is sensible enough.


# Flake8 Quotes Lints (Q) configuration.
[lint.flake8-quotes]
avoid-escape = true # Default: PEP 8 compliant.
docstring-quotes = "double" # Default: Docstrings should use double quotes.
inline-quotes = "double" # Default: Inline strings should use double quotes. This is ignored anyway due to the custom style, but in any case, it would come to use if it ended up not ignored.
multiline-quotes = "double" # Default: Multiline strings should use double quotes.


# Flake8 Tidy Imports (TID) configuration.
[lint.flake8-tidy-imports]
ban-relative-imports = "parents" # Default: No relative imports should extend beyond the parents.


# Flake8 Type Checking (TC) configuration.
[lint.flake8-type-checking]
quote-annotations = false # Default: Annotations should not be quoted.
strict = true # Custom: May be changed later.


# Flake8 Unused Arguments (ARG) configuration.
[lint.flake8-unused-arguments]
ignore-variadic-names = false # Default: No reason to define variadic arguments if not used.


# ISort (I) configuration.
[lint.isort]
case-sensitive = false # Default: Sorting shouldn't be case sensitive.
classes = [] # Custom: Override as classes when sorting.
combine-as-imports = true # Custom: Imports should be combined, even aliased ones.
constants = [] # Custom: Override as constants when sorting.
default-section = "third-party" # Default: If unknown, it's probably third party.
detect-same-package = true # Default: Same package imports are first party by definition.
extra-standard-library = [] # Custom: Override extra standard library imports.
force-single-line = false # Default: We want all the from imports to appear in one line if same package.
force-sort-within-sections = false # Default: It makes sense to separate from imports than simple imports, the default is sensible enough.
force-to-top = [] # Custom: Force packages to the top of of their sections.
force-wrap-aliases = false # Default: No need to wrap them if they fit in a single line.
forced-separate = [] # Default: No packages should be separate when new sections can be defined.
from-first = false # Default: `import` should go before `from _ import`.
known-first-party = ["_core"] # Custom: _core is the name used for the extension packages, and so are other packages inside the workspace.
known-local-folder = [] # Custom: Override for local folders.
known-third-party = [] # Custom: Override for third party packages.
length-sort = false # Default: As much aesthetically pleasing as this would be, sadly, it would make it hell to reason about the imports.
length-sort-straight = false # Default: I still will not be tempted, alphabetical sorting is still the way to go.
lines-after-imports = -1 # Default: Automatic inference is great.
lines-between-types = 1 # Custom: One line between `import` and `from _ import`.
no-lines-before = [] # Default: All sections should be separated
no-sections = false # Default: There should be import sectioning.
order-by-type = true # Default: There should be type ordering.
required-imports = [] # Default: There should be no required imports, annotations included in this.
section-order = [
    "future",
    "standard-library",
    "testing",
    "third-party",
    "workspace",
    "first-party",
    "local-folder",
] # Custom: Added testing before third party and workspace section before first party.
single-line-exclusions = [] # Custom: Overrides to single line rule.
split-on-trailing-comma = true # Default: It allows for choice over whether to fold or not.
variables = [] # Custom: Override as variables when sorting.

[lint.isort.sections]
testing = ["pytest", "pytest_asyncio", "tests"] # Testing packages.
workspace = [] # Workspace pacakges.


# PEP8 Naming (N) configuration.
[lint.pep8-naming]
classmethod-decorators = [] # Custom: Allows defining decorators that act like classmethod decorators.
staticmethod-decorators = [] # Custom: Allows defining decorators that act like staticmethod decorators.


# PyCode Style (E, W) configuration.
[lint.pycodestyle]
ignore-overlong-task-comments = true # Custom: Task comments should not be part of the linting process.
max-line-length = 100 # Custom: A line should never exceed 100 characters.


# PyDoc Lint (DOC) configuration.
[lint.pydoclint]
ignore-one-line-docstrings = false # Custom: All docstrings should be linted.


# PyDoc Style (D) configuration.
[lint.pydocstyle]
convention = "numpy" # Custom: NumPy Doc convention is usable by Sphinx, as complete as Google's and aesthetically pleasing and easy to follow, to boot.
ignore-decorators = [] # Custom: Override to ignore the functions that are decorated by some specific decorators.
ignore-var-parameters = false # Default: Even `*args` and `**kwargs` should be documented, as they should do something to the function and that something should be documented.
property-decorators = [] # Custom: Allows defining decorators that act like property decorators.


# PyFlakes (F) configuration.
[lint.pyflakes]
extend-generics = [] # Custom: Extra typings to consider generic over a subscript.


# PyLint (PL) configuration.
[lint.pylint]
allow-dunder-method-names = [] # Custom: Extra dunder allowed methods.
allow-magic-value-types = [] # Custom: No type should be allowed as a magic value, constants should be used instead.


# Ruff (RUF) configuration.
[lint.ruff]
parenthesize-tuple-in-subscript = false # Default: It is important to be consistent and [x,y] is clear already, no need to do [(x,y)] like in Rust.
